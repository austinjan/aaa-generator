# GEMINI.md

This file provides guidance to Gemini and other LLMs when working with code in this repository.

## Project Overview

**{{.ProjectName}}** - An advanced full-stack web application with Go backend, React frontend, database integration, and authentication, generated using the Go React Generator CLI.

**Tech Stack:**
- **Backend:** Go 1.21+ with database support ({{.DatabaseType}})
- **Frontend:** React 18 + Vite 5 + React Router
- **Authentication:** {{.AuthProvider}}
- **Database:** {{.DatabaseType}}
- **Build System:** Make (Unix) / build.bat (Windows)

## Quick Start Commands

```bash
# Install all dependencies
make install

# Development mode (separate terminals)
make frontend-dev   # Frontend dev server (http://localhost:5173)
make backend-dev    # Backend server (http://localhost:{{.Port}})

# Production build
make build          # Builds frontend bundle + Go binary

# Run production binary
./{{.ProjectName}}

# Run tests
make test

# Clean build artifacts
make clean
```

## Architecture

### Backend Structure

**Database Configuration:**
- Database type: {{.DatabaseType}}
- Connection configuration in environment variables or config files
- Database migrations and schema management

**Authentication:**
- Auth provider: {{.AuthProvider}}
- Protected routes require authentication
- Token/session management

**API Endpoints:**
- `GET /api/health` - Health check endpoint
- `GET /api/auth/*` - Authentication endpoints
- `GET /api/users/*` - User management endpoints (protected)
- All routes starting with `/api/` are treated as API routes

**Embedded Frontend Serving:**
- Uses `//go:embed dist/*` to embed frontend build into the Go binary
- Single binary deployment includes all static assets
- SPA routing: non-API routes serve `index.html`

### Frontend Structure ([frontend/](frontend/))

**React + Vite Setup:**
- Entry point: [src/main.jsx](frontend/src/main.jsx)
- Main component: [src/App.jsx](frontend/src/App.jsx)
- Build output: `frontend/dist/` (embedded into Go binary)

**Authentication:**
- Auth provider integration: {{.AuthProvider}}
- Protected routes using React Router
- Token/session persistence in localStorage or cookies

**Development vs Production:**
- **Dev:** Vite dev server on port 5173, proxies API calls
- **Prod:** Frontend built to `dist/`, embedded and served by Go binary

## Database Setup

### {{.DatabaseType}} Configuration

**Connection String:**
- Configure via environment variables or config file
- Default connection settings for development

**Migrations:**
- Database migrations located in `migrations/` directory
- Run migrations: `make migrate` or similar command
- Schema versioning and rollback support

**ORM/Query Builder:**
- Use appropriate Go library for {{.DatabaseType}}
- Connection pooling and transaction management

## Authentication System

### {{.AuthProvider}} Implementation

{{if eq .AuthProvider "jwt"}}
**JWT Authentication:**
- Tokens issued on successful login
- Include JWT in `Authorization: Bearer <token>` header
- Token refresh mechanism
- Token validation middleware for protected routes
{{else if eq .AuthProvider "oauth2"}}
**OAuth2 Authentication:**
- OAuth2 provider configuration
- Authorization code flow
- Token exchange and refresh
- User profile fetching
{{else}}
**No Authentication:**
- All routes are public
- Add authentication as needed
{{end}}

## Common Development Tasks

### Adding New API Endpoints

1. Create handler function with appropriate middleware:
```go
func myHandler(w http.ResponseWriter, r *http.Request) {
    // Add auth middleware if needed
    writeJSON(w, http.StatusOK, myResponse{...})
}
```

2. Register route with middleware chain:
```go
http.HandleFunc("/api/myroute", authMiddleware(myHandler))
```

### Database Operations

**Adding Models:**
1. Define struct models with appropriate tags
2. Create migration files for schema changes
3. Implement CRUD operations with proper error handling

**Transactions:**
- Use database transactions for multi-step operations
- Implement rollback on errors

### Adding Protected Routes

**Backend:**
- Apply authentication middleware to route handlers
- Validate tokens/sessions before processing requests

**Frontend:**
- Check authentication state before rendering
- Redirect to login if unauthenticated
- Store auth tokens securely

## Environment Configuration

**Required Environment Variables:**
- `PORT` - Server port (default: {{.Port}})
- `DATABASE_URL` - Database connection string
- `JWT_SECRET` - Secret for JWT signing (if using JWT)
- `OAUTH_CLIENT_ID` - OAuth client ID (if using OAuth2)
- `OAUTH_CLIENT_SECRET` - OAuth client secret (if using OAuth2)

## Build and Deployment

**Production Build Process:**
1. `make frontend-build` - Builds React app to `frontend/dist/`
2. `make backend-build` - Compiles Go binary with embedded frontend
3. Result: Single executable containing everything

**Deployment Checklist:**
- Set all required environment variables
- Run database migrations
- Configure database connection
- Set up authentication secrets/keys
- Deploy single binary with embedded frontend

## Testing Strategy

**Backend:**
- Unit tests: `go test ./...`
- Integration tests for database operations
- API endpoint tests with authentication

**Frontend:**
- Component tests: `cd frontend && npm test`
- Authentication flow tests
- Protected route tests

**Database:**
- Test migrations up and down
- Test data integrity constraints
- Test transaction rollbacks

## Security Considerations

**Authentication:**
- Secure token/session storage
- HTTPS in production (configure reverse proxy)
- CSRF protection for state-changing operations
- Rate limiting on authentication endpoints

**Database:**
- SQL injection prevention (use parameterized queries)
- Connection string security (don't commit secrets)
- Database user permissions (principle of least privilege)

**API:**
- Input validation and sanitization
- CORS configuration for production
- Error messages don't leak sensitive information

## Common Issues

**Database connection errors:**
- Verify DATABASE_URL environment variable
- Check database server is running
- Verify network connectivity and firewall rules

**Authentication failures:**
- Check JWT secret is set correctly
- Verify token expiration settings
- Check OAuth2 credentials and callback URLs

**Frontend not updating in production:**
- Run `make frontend-build` to rebuild dist/
- Run `make backend-build` to re-embed frontend
- Binary must be rebuilt to include new frontend assets
