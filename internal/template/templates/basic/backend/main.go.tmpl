package main

import (
	"embed"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"os"
)

//go:embed dist/*
var staticFiles embed.FS

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "{{.Port}}"
	}

	// API 路由
	http.HandleFunc("/api/health", healthHandler)
	http.HandleFunc("/api/hello", helloHandler)

	// 靜態文件服務
	distFS, err := fs.Sub(staticFiles, "dist")
	if err != nil {
		log.Fatal("Failed to create sub filesystem:", err)
	}

	// 設置靜態文件服務器
	fileServer := http.FileServer(http.FS(distFS))
	http.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// 如果請求的是 API 路由，不處理
		if r.URL.Path == "/" || r.URL.Path == "/static/" {
			fileServer.ServeHTTP(w, r)
			return
		}
		
		// SPA 路由處理 - 所有非 API 請求都返回 index.html
		if !isStaticFile(r.URL.Path) && !isAPIRoute(r.URL.Path) {
			r.URL.Path = "/"
		}
		fileServer.ServeHTTP(w, r)
	}))

	fmt.Printf("🚀 {{.ProjectName}} server starting on http://localhost:%s\n", port)
	fmt.Println("📱 Frontend: http://localhost:" + port)
	fmt.Println("🔗 API Health: http://localhost:" + port + "/api/health")
	
	log.Fatal(http.ListenAndServe(":"+port, nil))
}

func healthHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"status": "healthy", "service": "{{.ProjectName}}", "version": "1.0.0"}`))
}

func helloHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"message": "Hello from {{.ProjectName}}!", "timestamp": "` + 
		fmt.Sprintf("%d", System.currentTimeMillis()) + `"}`))
}

func isStaticFile(path string) bool {
	staticExtensions := []string{".js", ".css", ".png", ".jpg", ".jpeg", ".gif", ".ico", ".svg", ".woff", ".woff2", ".ttf", ".eot"}
	for _, ext := range staticExtensions {
		if strings.HasSuffix(path, ext) {
			return true
		}
	}
	return false
}

func isAPIRoute(path string) bool {
	return strings.HasPrefix(path, "/api/")
}